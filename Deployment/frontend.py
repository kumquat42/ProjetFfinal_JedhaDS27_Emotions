import streamlit as st
import requests
from PIL import Image
import io
from streamlit_option_menu import option_menu
import base64

# Constantes
emotion_dict = {0: "Angry", 1: "Happy", 2: "Neutral", 3: "Sad"}
emotion_emote_dict = {
    "Angry": "üò°",
    "Happy": "üòÑ",
    "Neutral": "üòê",
    "Sad": "üò¢"
}

FASTAPI_SERVER_URL = "https://api-final-22012024-342b6c7072fa.herokuapp.com/predect"

def page_config():
    st.set_page_config(
        page_title="Emotion Detector",
        page_icon=":smiley:",
        layout="wide",
        initial_sidebar_state="auto",
    )
    st.markdown("""
        <style>
        .big-font {
            font-size:30px !important;
            font-weight: bold;
        }
        .image-carousel {
            max-width: 100%;
            height: auto;
        }
        </style>
        """, unsafe_allow_html=True)
    
    with st.sidebar:choix = option_menu("Menu", ["Contexte","T√©l√©chargez une image", "Mets ta cam"],
                                        icons=['house','upload','camera fill']
    )
    return choix

def context():
    st.markdown("<p class='big-font'>Contexte du Projet:</p>", unsafe_allow_html=True)


    st.markdown("""
    <br>EmoTycoon - Application de reconnaissance des √©motions<br>


    Les enfants autistes sont connus pour identifier difficilement leurs √©motions dans
    les situations sociales.la joie est ressentie plus intens√©ment que les √©motions n√©gatives
    (tristesse, col√®re) et la peur n'est pas ressentie avec une grande intensit√©.


    Toutes les √©tudes concernant la reconnaissance des √©motions dans l'autisme de 1989 √† 2011 confirme la reconnaissance du
    bonheur chez les personnes autistes, avec un taux de reconnaissance de 95 %, ainsi que la
    non-reconnaissance de la peur, dont le taux est proche de 0. Les autres √©motions n√©gatives
    (tristesse, col√®re et d√©go√ªt) sont plus faiblement reconnues que le bonheur mais mieux
    reconnues que la peur (Uljarevic et Hamilton, 2013).
    Aussi, les autistes ressentent moins d'√©motions complexes, comme l'embarras, la
    honte ou la fiert√© (Capps, Yirmiya & Sigman, 1992). Ces √©motions sont aussi dites
    ¬´ centr√©es sur le soi ¬ª ou, parfois, appel√©es ¬´ √©motions sociales ¬ª
                    """, unsafe_allow_html=True)



def display_title():
    # Configuration de la page Streamlit
    st.title("Reconnaissance des √©motions")
    st.write("T√©l√©chargez une image et le mod√®le pr√©dira l'√©motion")

def upload():
    # Widget de televersement de fichier
    uploaded_file = st.file_uploader("Choisissez une image...", type=["jpg", "png", "jpeg"])
    buffer = None
    
    # Creation de colonnes pour afficher l'image et la pr√©diction
    col_empty, col1, col2 = st.columns([1,1,2])
            
    # Lorsqu'un fichier est t√©l√©vers√©
    if uploaded_file is not None:
        # Afficher l'image t√©l√©vers√©e
        image = Image.open(uploaded_file)
        
        # Define the maximum size
        max_size = (1000, 1000)
        
        # Resize the image
        image.thumbnail(max_size)

        col1.image(image, caption='Image t√©l√©vers√©e', use_column_width=False)
        
        # Pr√©parer l'image pour le serveur FastAPI
        buffer = io.BytesIO()
        image.save(buffer, format="JPEG")
        buffer.seek(0)   
        
    return uploaded_file, buffer

def emo_pred(uploaded_file, buffer):
    
    try:
        # Requ√™te POST au serveur FastAPI
        files = {"file": (uploaded_file.name, buffer, "multipart/form-data")}
        response = requests.post(FASTAPI_SERVER_URL, files=files)
        return response
        
    except Exception as e:
        st.write("Erreur lors de la requ√™te POST au serveur FastAPI : " + str(e))
        return None
        
def display_full_image(response_data): 
    # Verification de la pr√©sence de la cl√© 'full_image' dans la r√©ponse
    if "full_image" in response_data:
        # Decode la chaine base64 en image
        full_image = decode_image(response_data["full_image"])
        # Creation de colonnes pour afficher l'image et la pr√©diction
        col_empty, col1, col2 = st.columns([1,1,2])
        # Afficher l'image trait√©e
        col1.image(full_image, caption='Image trait√©e', use_column_width=False)

def display_predictions(response_data):
    # Verification de la pr√©sence des cl√©s 'image' et 'prediction' et 'full_prediction' dans la r√©ponse
    if "image" in response_data:
        image_list = response_data["image"] # Liste des images
        prediction = response_data["prediction"] # Liste des pr√©dictions
        full_prediction = response_data["full_prediction"] # Liste des pr√©dictions
        
        # Decode la chaine base64 en bytes
        for i in range(len(image_list)):
            image = decode_image(image_list[i])
            pred = prediction[i]
            
            # Creation de colonnes pour afficher l'image et la pr√©diction
            col_empty, col1, col2 = st.columns([1,1,2])
            
            emotion_emote = emotion_emote_dict[pred]
            # Display the image without a caption
            col1.image(image, width=200)

            # Display the caption using markdown with a larger font size
            col1.markdown(f"<h2>√âmotion pr√©dite : {pred} {emotion_emote}</h2>", unsafe_allow_html=True)
            
            ## Cr√©ez des barres de progression pour chaque √©motion
            progress_value = [None] * len(full_prediction[i][0])
            
            for j, score in enumerate(full_prediction[i][0]):
                emotion = emotion_dict[j]
                col2.markdown(f"**Probabilit√© d'√©motion: {emotion} : {score*100:.2f}%**")
                progress_value = int(score * 100)
                col2.progress(progress_value)
                
            # Ajout d'un d√©limiteur entre chaque ligne
            if i < len(image_list) - 1:  # Sauf pour la derni√®re ligne
                st.markdown("---")    
    else:
        st.write("Aucune donn√©e d'image trouv√©e dans la r√©ponse")

def cam():
    # File uploader
    uploaded_file = st.camera_input("Allume ta webcam et prends toi directement en photo!")
    response = None
    
    try:
        if uploaded_file is not None:
            # Process the image here (e.g., save it to a specific location)
            st.success("Ton image a bien √©t√© t√©l√©charg√©e!")
            st.write("Ta pr√©diction va bient√¥t appara√Ætre!")
            # Send request to FastAPI server
            api_url = FASTAPI_SERVER_URL
            data = {"file": uploaded_file.getvalue(), "type":"image/jpeg"}
            response = requests.post(api_url, files=data)
            return response
            
    except Exception as e:
        st.write("Erreur lors de la requ√™te POST au serveur FastAPI : " + str(e))
        return None
        

def decode_image(image_data):
    # Decode la chaine base64 en bytes
    image_data = base64.b64decode(image_data)
    # Conversion des bytes en image
    image = Image.open(io.BytesIO(image_data))
    return image


def main():
    choix = page_config()
    
    if choix == "Contexte":
        context()

    elif choix == "T√©l√©chargez une image":
        display_title()
        uploaded_file, buffer = upload()
        if st.button('Pr√©dire'):
            response = emo_pred(uploaded_file, buffer)
            if response.status_code == 200:
                response_data = response.json()
                display_full_image(response_data)
                display_predictions(response_data)
                
    elif choix == "Mets ta cam" :
        response = cam()
        if response is not None:
            if response.status_code == 200:
                response_data = response.json()
                display_full_image(response_data)
                display_predictions(response_data)
            else:
                st.write("Une erreur s'est produite, code d'√©tat :", response.status_code)

# Run the app
if __name__ == "__main__":
    main()